<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://performance-book.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://performance-book.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-06-14T21:42:52+00:00</updated><id>https://performance-book.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">A Meticulous Guide to Performance Measurement, Analysis, and Modeling in ML Systems</title><link href="https://performance-book.github.io/blog/2024/profilers-ml/" rel="alternate" type="text/html" title="A Meticulous Guide to Performance Measurement, Analysis, and Modeling in ML Systems"/><published>2024-12-20T00:00:00+00:00</published><updated>2024-12-20T00:00:00+00:00</updated><id>https://performance-book.github.io/blog/2024/profilers-ml</id><content type="html" xml:base="https://performance-book.github.io/blog/2024/profilers-ml/"><![CDATA[<p>This post offers a comprehensive literature review on the evolution of performance analysis and modeling tools for deep learning systems. It covers the journey from general-purpose HPC profilers to highly specialized, trace-driven simulators designed to tackle the complexities of today’s large-scale models. This post is intended to provide the reader with a broad intuition about this field, synthesizing findings from key research papers.</p> <p>Preface. The field of deep learning has flourished in the past decade, and with it, the systems that run these models have grown astronomically complex. Training a foundation model can involve thousands of GPUs running for weeks, making performance efficiency not just a goal, but a necessity. Understanding why a model is slow, identifying bottlenecks, and predicting the impact of optimizations are critical challenges. This has spurred a parallel evolution in performance measurement, analysis, and modeling tools, moving from generic profilers to sophisticated, trace-driven simulators that can accurately capture and predict the behavior of massive, distributed ML workloads. This post chronicles that evolution, drawing on a selection of key research papers that have defined the state of the art.</p> <p>Part I. The Beginning (The HPC Era)</p> <p>Before deep learning dominated the landscape, the world of high-performance computing (HPC) had long grappled with performance analysis for complex, parallel programs. Tools from this era were built to be portable and general-purpose, supporting a wide array of programming languages (Fortran, C++, MPI) and architectures.</p> <p>A prime example is the TAU Performance System <d-cite key="huck-et-al-2025-preparing-the-tau-performance-system-for-exascale-and-beyond"></d-cite>. As a portable profiling and tracing toolkit, TAU was designed to gather performance data through instrumentation or sampling, providing insights into function calls, basic blocks, and more. Its adaptability allowed it to run on virtually all DOE HPC systems, from pre-exascale machines like Titan to the exascale systems of today. This focus on portability and comprehensive measurement across different programming models laid the groundwork for the types of analysis that would become crucial for ML systems. However, the unique, graph-based execution model and the sheer scale of deep learning would soon demand a new, more specialized generation of tools.</p> <p>Part II. Oh s*** — Deep learning works! (2012 - 2020)</p> <p>With the breakthrough success of models like AlexNet, the research community and industry rapidly developed dedicated deep learning frameworks like TensorFlow and PyTorch. This shift created a need for tools that understood the specific constructs of these frameworks, moving beyond generic function profiling to analyze the performance of operators, kernels, and the underlying computational graphs.</p> <p>II.1: The Rise of Framework-Specific Profilers</p> <p>To address the unique challenges of debugging ML models, frameworks began incorporating built-in profiling tools. These tools integrated with low-level hardware-specific APIs, like NVIDIA’s CUDA Profiling Tools Interface (CUPTI) <d-cite key="2_Fine_grained_Trace_driven_Pe.pdf"></d-cite>, to provide a holistic view of the execution stack, from the host CPU down to the individual GPU kernels.</p> <p>The <strong>PyTorch Profiler</strong>, powered by <strong>Kineto</strong>, is a prominent example. It captures runtime information for PyTorch operators, CUDA runtime API calls, and GPU kernel executions. This includes critical metadata like start times, durations, CUDA stream IDs, and correlation IDs that link CPU-side operations to their corresponding GPU-side kernels. This ability to generate detailed, multi-level traces became the foundational data source for a new wave of performance analysis techniques. Similarly, large-scale deployments like those at Facebook developed extensive telemetry infrastructures, using CUPTI-based libraries to continuously collect performance counters (e.g., SM efficiency, achieved occupancy) and on-demand traces from every workflow across the datacenter fleet <d-cite key="Datacenter-Scale_Analysis_and_Optimization_of_GPU_Machine_Learning_Workloads.pdf"></d-cite>.</p> <p>II.2: Early Trace-Based Performance Models</p> <p>With the availability of detailed execution traces, researchers began developing performance models to simulate and predict training performance. These early tools aimed to answer “what-if” questions about the efficacy of potential optimizations without the cost of running real experiments.</p> <p>Daydream <d-cite key="Zhu_2020"></d-cite> was a notable early effort that used kernel-level dependency graphs collected with CUPTI to predict model runtime under specific optimizations. It worked by constructing a graph where nodes represented tasks and edges represented dependencies, allowing for simulation of the critical path. Similarly, dPRO <d-cite key="hu2022dpro"></d-cite> tracked dependencies among operators to build a global dataflow graph to estimate DNN training performance.</p> <p>However, these pioneering tools had a significant limitation: they did not fully account for the complexities of modern distributed training, particularly the use of multiple concurrent CUDA streams and the intricate dependencies between them. As model parallelism and techniques for overlapping computation with communication became commonplace, this gap led to inaccuracies, especially for the large-scale models that were just over the horizon <d-cite key="2_Fine_grained_Trace_driven_Pe.pdf,2504.09307v1.pdf"></d-cite>.</p> <p>Part III. The Era of Scale till we Fail (2020 - Now)</p> <p>The advent of massive models like GPT-3 marked a new era. The complexity of training and inference, often involving hybrid parallelism strategies across thousands of GPUs, pushed existing performance analysis tools to their limits. A new generation of tools and methodologies emerged, focusing on creating highly accurate, fine-grained models of execution that could handle the intricacies of modern LLMs.</p> <p>III.1: The Need for a Common Language - Standardized Execution Traces</p> <p>As different organizations (model developers, hardware vendors, cloud providers, academics) began collaborating on co-design and optimization, the lack of a common format for performance data became a major bottleneck. Each framework and tool produced traces in its own proprietary format, hindering the exchange of information.</p> <p>The Chakra project was proposed to solve this problem by introducing a standardized, open-source schema for execution traces (ETs) <d-cite key="sridharan2023chakra"></d-cite>. An ET is a graph-based representation of a model’s execution, capturing key computational and communication operations, their properties (e.g., tensor shapes, data sizes), and their dependencies.</p> <p>The Chakra schema was designed to be:</p> <ul> <li>Minimal yet Extensible: It defines a core set of required fields (ID, name, type, parents) and uses a flexible attribute system for adding custom metadata. This allows it to be adapted for various tools and use cases.</li> <li>Framework-Agnostic: By providing converters from framework-specific traces (like PyTorch’s) to the Chakra ET format, it enables a unified ecosystem of tools.</li> <li>Protective of IP: Sharing full model details is often impossible due to proprietary IP. ETs provide a level of abstraction, capturing the performance-critical aspects of a workload without revealing the underlying model weights or architecture. Chakra also proposes using generative models to synthesize realistic but anonymized ETs for wider sharing.</li> </ul> <p>By creating a “lingua franca” for performance data, Chakra aims to foster a vibrant ecosystem of interoperable simulators, benchmarks, and analysis tools to accelerate AI system co-design.</p> <p>III.2: Advanced Trace-Driven Simulation for LLMs</p> <p>Building on the foundation of standardized traces, a new generation of simulators emerged to address the shortcomings of earlier tools. Frameworks like TraceSim <d-cite key="2_Fine_grained_Trace_driven_Pe.pdf"></d-cite> and Lumos <d-cite key="2504.09307v1.pdf"></d-cite> are designed specifically to model the complex execution of large-scale LLM training.</p> <p>Their key innovation lies in the construction of a much more comprehensive execution graph. Unlike older tools, they explicitly model all four crucial dependency types:</p> <ol> <li>CPU-to-CPU: Both intra-thread (sequential operations) and inter-thread (e.g., forward pass blocking the backward pass) dependencies.</li> <li>CPU-to-GPU: Kernel launches (e.g., cudaLaunchKernel) that initiate GPU work.</li> <li>GPU-to-CPU: Synchronization events (e.g., cudaDeviceSynchronize) where the CPU waits for the GPU.</li> <li>GPU-to-GPU: Both intra-stream (sequential kernels on the same stream) and, critically, inter-stream dependencies. These are managed via events like cudaEventRecord and cudaStreamWaitEvent and are essential for accurately modeling the overlap of computation and communication.</li> </ol> <p>By capturing this fine level of detail, these tools can achieve very high accuracy. Lumos, for instance, replayed the execution time of various GPT-3 models with an average error of just 3.3% <d-cite key="2504.09307v1.pdf"></d-cite>. TraceSim achieved 95.6% accuracy in reproducing execution time on a 256-GPU cluster <d-cite key="2_Fine_grained_Trace_driven_Pe.pdf"></d-cite>. This accuracy allows them to faithfully reproduce not just total runtime, but also detailed metrics like execution breakdown (exposed compute vs. communication vs. overlap) and Streaming Multiprocessor (SM) utilization.</p> <p>III.3: From Traces to Benchmarks - The Rise of Replay</p> <p>While simulation is powerful, sometimes a lightweight, runnable benchmark is needed for hardware evaluation or regression testing. The “replay as benchmark” paradigm aims to generate such programs directly from execution traces.</p> <p>Mystique is a framework that automates this process for PyTorch workloads <d-cite key="liang2023mystique"></d-cite>. It takes an ET and generates a PyTorch program that replays the original sequence of operators with the same arguments, dependencies, and stream execution patterns. The key advantages are:</p> <ul> <li>Representativeness: The generated benchmarks faithfully reflect the performance characteristics of real, production workloads.</li> <li>Scalability: The process is automated and trace collection has low overhead, allowing for continuous generation of up-to-date benchmarks from a fleet of production models.</li> <li>Portability: The generated benchmarks have minimal dependencies (just PyTorch) and are hardware-agnostic, making them easy to share with external vendors for co-design and evaluation.</li> </ul> <p>Mystique demonstrated that its generated benchmarks could closely match the original models not only in execution time but also in system-level metrics like SM utilization, HBM bandwidth, and GPU power consumption.</p> <p>III.4: Characterizing the Unseen - What-If Analysis and Performance Prediction</p> <p>Perhaps the most powerful application of these trace-driven models is predicting performance for scenarios that haven’t been run. This is crucial for exploring vast optimization spaces without incurring prohibitive hardware costs.</p> <p>Lumos and TraceSim excel at this. By taking a baseline execution graph from a small-scale run, they can manipulate it to model new configurations:</p> <ul> <li>Scaling Parallelism: To predict performance when scaling Data Parallelism (DP), the model can simply substitute the execution times of communication collectives with values predicted for a larger number of GPUs. For Pipeline Parallelism (PP), it can re-partition the layers in the graph and update the pipeline schedule. TraceSim achieved up to 99.5% accuracy in predicting scaled-up performance for GPT-3 <d-cite key="2_Fine_grained_Trace_driven_Pe.pdf"></d-cite>.</li> <li>Changing Model Architecture: To estimate the effect of changing hidden size, the models update the input tensor dimensions and predict new kernel runtimes. To change the number of layers, they can duplicate or remove layer subgraphs. Lumos demonstrated high accuracy in these predictions <d-cite key="2504.09307v1.pdf"></d-cite>.</li> </ul> <p>This predictive capability allows engineers to efficiently answer questions like “Which parallelism strategy is best for this model on 512 GPUs?” or “What is the performance impact of increasing the number of layers by 25%?”—all from a single trace collected on a much smaller system.</p> <p>III.5: A Sharper Focus - Inference and CPU-GPU Dynamics</p> <p>While much work has focused on training, LLM inference presents its own unique performance challenges, especially concerning latency. The SKIP profiler was developed to perform an in-depth analysis of LLM inference workloads, with a special focus on the dynamics of different CPU-GPU coupling architectures (e.g., loosely-coupled PCIe vs. closely-coupled NVLink-C2C) <d-cite key="vellaisamy2025characterizing"></d-cite>.</p> <p>SKIP introduces novel metrics derived from its fine-grained operator-to-kernel dependency graph. The most significant is <strong>Total Kernel Launch and Queuing Time (TKLQT)</strong>, which measures the time between a CPU-side cudaLaunchKernel call and the actual start of the kernel’s execution on the GPU. This metric effectively captures both the CPU overhead of launching the kernel and any queuing delay if the GPU is already saturated.</p> <p>Using TKLQT, SKIP can precisely identify when a workload transitions from being CPU-bound (where latency is dominated by kernel launch overhead) to GPU-bound (where latency is dominated by kernel execution and queuing). This analysis revealed that closely-coupled systems like the GH200 remain CPU-bound up to much larger batch sizes than their loosely-coupled counterparts, highlighting the critical role of CPU single-thread performance in low-batch, latency-sensitive inference scenarios.</p> <p>Part N: Modern Day and Beyond</p> <p>The field of ML performance analysis is far from solved. The continuous evolution of models, hardware, and distributed training techniques presents ongoing challenges and exciting opportunities for future research.</p> <p>N1. Key Challenges and Future Opportunities</p> <p>A comprehensive survey by Guo et al. <d-cite key="guo2024survey"></d-cite> and the future work sections of the reviewed papers point to several key areas:</p> <ul> <li>Fine-Grained Modeling of Compute and Memory: Current models often use high-level estimates (like FLOPS) for computation and simplified assumptions for memory. Future tools need to integrate with detailed architecture simulators (e.g., GPGPU-Sim) to accurately model complex memory hierarchies, including caches, memory pooling, and disaggregated memory systems.</li> <li>Support for Complex Network Topologies: As distributed systems move to higher-dimensional interconnects (4D/5D torus, etc.), simple analytical network models are insufficient. Integrating with detailed network simulators (e.g., ASTRA-sim, ns-3) is necessary to capture effects like congestion and topology-aware routing.</li> <li>Unified Standard Benchmarks: It is currently difficult to compare different modeling tools because they are evaluated on different workloads and metrics. A standardized benchmark suite, akin to MLPerf but for performance prediction tools, is needed to drive progress and allow for fair comparisons. The Chakra project is a step in this direction for trace formats.</li> <li>AI-Enabled Optimization: The ultimate goal is not just to analyze performance, but to automatically optimize it. Future systems could use AI models trained on performance trace data to replace slow, complex modules in a simulator, enabling fast and accurate prediction. This could also power dynamic, runtime optimization systems that use reinforcement learning to adjust scheduling, parallelism, or other configurations on the fly.</li> </ul> <p>Resources</p> <p>A4. Profiling, Tracing, and Modeling Tools</p> <p>Here is a summary of the key tools and frameworks discussed in this review, which are essential for anyone working on ML system performance.</p> <ul> <li>PyTorch Profiler (with Kineto): The primary source of performance data for PyTorch models. It provides detailed, correlated traces of CPU operator execution, CUDA API calls, and GPU kernel activity. It is the starting point for most modern trace-driven analysis.</li> <li>NVIDIA Tools (CUPTI, Nsight, NVProf): Low-level libraries and tools from NVIDIA. CUPTI is the API that enables tools like Kineto to collect GPU performance data. Nsight Systems is a powerful system-wide profiler for visualizing and debugging performance on NVIDIA hardware.</li> <li>Chakra: An open-source, standardized schema and ecosystem for execution traces. Its goal is to enable interoperability between different tools and organizations, fostering collaboration in HW-SW co-design and performance analysis.</li> <li>TraceSim &amp; Lumos: State-of-the-art trace-driven performance modeling and simulation frameworks for large-scale LLM training. They construct highly detailed execution graphs that capture complex inter-stream dependencies, enabling accurate performance replay and reliable “what-if” prediction for new model and system configurations.</li> <li>Mystique: An automated framework for generating portable, representative AI benchmarks directly from production execution traces. It simplifies the process of creating high-fidelity workloads for hardware evaluation and system studies.</li> <li>SKIP: A novel profiler focused on analyzing LLM inference workloads. It uses fine-grained operator-to-kernel analysis and the TKLQT metric to characterize CPU vs. GPU boundedness on different coupled architectures and provides data-driven recommendations for kernel fusion.</li> <li>ASTRA-sim: A distributed ML system simulator that facilitates the exploration of bottlenecks and the development of efficient methodologies for large DNN models, with a strong focus on modeling network topologies and communication.</li> <li>Daydream &amp; dPRO: Earlier trace-based modeling tools that laid the groundwork for modern simulators. While limited in their handling of concurrent streams, they pioneered the use of dependency graphs for performance estimation.</li> <li>TAU Performance System: A mature, portable, and comprehensive profiling and tracing toolkit for general-purpose HPC. It supports an extensive range of programming models (MPI, OpenMP, CUDA, HIP, SYCL) and has been extended to support deep learning frameworks like PyTorch and TensorFlow, making it a powerful tool for analyzing complex, multi-language ML workflows.</li> </ul>]]></content><author><name>ynxia</name></author><category term="efficient"/><category term="performance"/><category term="profiling"/><category term="ml-systems"/><summary type="html"><![CDATA[A literature review and guide to the evolution of performance analysis tools, from foundational profilers to advanced trace-driven simulators for large-scale ML systems.]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://performance-book.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://performance-book.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://performance-book.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024[[read-time]] min read We’re introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we’re introducing Gemini 1.5 Flash: a model that’s lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We’re also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5’s 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It’s optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it’s a lighter weight model than 1.5 Pro, it’s highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it’s been trained by 1.5 Pro through a process called “distillation,” where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash’s availability and pricing.Over the last few months, we’ve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we’ve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We’ve improved control over the model’s responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we’ve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we’re now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do — not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we’re also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We’re announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we’ve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind’s mission to build AI responsibly to benefit humanity, we’ve always wanted to develop universal AI agents that can be helpful in everyday life. That’s why today, we’re sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do — and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we’ve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we’ve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we’ve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they’re being used in, and respond quickly, in conversation.With technology like this, it’s easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We’ve made incredible progress so far with our family of Gemini models, and we’re always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we’re able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google’s privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let’s stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://performance-book.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://performance-book.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://performance-book.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[<h3>External Posts on Your al-folio Blog</h3> <p>If you prefer publishing blog posts on medium.com or other external sources, starting version v0.5.0, <a href="https://github.com/alshedivat/al-folio">al-folio</a> lets you to display your external posts in the blog feed of your website! 🎉🎉</p> <p>Configuring external sources of super simple. After upgrading to v0.5.0, just add the following section to your _config.yml:</p> <pre>external_sources:<br />  - name: medium.com  # name of the source (arbitrary string)<br />    rss_url: <a href="https://medium.com/@al-folio/feed">https://medium.com/@&lt;your-medium-username&gt;/feed</a></pre> <p>The example above adds your medium.com blog post feed as an external source. But you can add arbitrary RSS feeds as sources.</p> <p>Any questions or suggestions? 👉 Start <a href="https://github.com/alshedivat/al-folio/discussions">a discussion on GitHub</a>!</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b60a1d241a0a" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry></feed>